const fs = require('fs');
const path = require('path');
const https = require('https');
const http = require('http');

// Configuration
const config = {
  libraryJsonUrl: 'http://localhost:3000/tools/sidekick/library.json',
  outputFile: path.join(__dirname, 'visual.spec.ts'),
  templateFile: path.join(__dirname, 'visual.spec.template.ts'),
  fallbackComponents: [
    { name: 'cards', path: '/tools/blocks/cards' },
    { name: 'columns', path: '/tools/blocks/columns' },
    { name: 'footer', path: '/tools/blocks/footer' },
    { name: 'fragment', path: '/tools/blocks/fragment' },
    { name: 'header', path: '/tools/blocks/header' },
    { name: 'hero', path: '/tools/blocks/hero' }
  ]
};

/**
 * Fetch data from a URL
 * @param {string} url - The URL to fetch
 * @returns {Promise<Object>} - The parsed JSON response
 */
function fetchJson(url) {
  return new Promise((resolve, reject) => {
    const client = url.startsWith('https') ? https : http;
    
    client.get(url, (res) => {
      let data = '';
      
      // A chunk of data has been received
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      // The whole response has been received
      res.on('end', () => {
        try {
          const parsedData = JSON.parse(data);
          resolve(parsedData);
        } catch (e) {
          reject(new Error(`Error parsing JSON: ${e.message}`));
        }
      });
    }).on('error', (err) => {
      reject(new Error(`Error fetching data: ${err.message}`));
    });
  });
}

/**
 * Generate the test file content
 * @param {Array} components - The components to test
 * @returns {string} - The generated test file content
 */
function generateTestFile(components) {
  const componentsList = JSON.stringify(components, null, 2);
  
  // Read the template file
  let templateContent;
  try {
    templateContent = fs.readFileSync(config.templateFile, 'utf8');
    console.log(`Template file read: ${config.templateFile}`);
  } catch (error) {
    console.error(`Error reading template file: ${error.message}`);
    // Fallback to a basic template
    templateContent = `import { test, expect } from '@playwright/test';
import config from './visual-test-config.js';

// This file was auto-generated by generate-tests.js
// Do not modify this file directly, as it will be overwritten

interface Component {
  name: string;
  path: string;
}

// Components fetched from library.json
const components: Component[] = [];

// For each viewport defined in the config
for (const viewport of config.viewports) {
  test.describe(\`Viewport: \${viewport.name}\`, () => {
    // Tests will be generated here
  });
}`;
  }
  
  // Generate individual test functions for each component
  let componentTests = '';
  components.forEach(component => {
    componentTests += `
    test('Component: ${component.name}', async ({ page }) => {
      console.log('Testing component: ${component.name} at path: ${component.path} for viewport: ' + viewport.name);
      
      // Navigate to the component
      await page.goto('${component.path}');
      
      // Get the appropriate selector
      const selector = config.options.customSelectors?.['${component.name}'] || '.${component.name}';
      
      // Wait for component to be fully rendered
      await page.waitForSelector(selector, { state: 'visible' });
      
      // Wait for stabilization time if configured
      if (config.options.stabilizationTime) {
        await page.waitForTimeout(config.options.stabilizationTime);
      }
      
      // Take screenshot for comparison
      await expect(page.locator(selector)).toHaveScreenshot(
        '${component.name}-' + viewport.name + '.png'
      );
    });`;
  });
  
  // Replace the components placeholder and the tests placeholder
  const generatedContent = templateContent
    .replace(/const components: Component\[\] = \[[\s\S]*?\];/, `const components: Component[] = ${componentsList};`)
    .replace(/\/\/ This is a template file for visual\.spec\.ts[\s\S]*?\/\/ The actual test file will be generated by generate-tests\.js/, 
             `// This file was auto-generated by generate-tests.js on ${new Date().toISOString()}\n// Do not modify this file directly, as it will be overwritten`)
    .replace(/\/\/ COMPONENT_TESTS_PLACEHOLDER/, componentTests);
  
  return generatedContent;
}

/**
 * Write content to a file
 * @param {string} filePath - The path to the file
 * @param {string} content - The content to write
 */
function writeToFile(filePath, content) {
  fs.writeFileSync(filePath, content, 'utf8');
  console.log(`File written: ${filePath}`);
}

/**
 * Main function
 */
async function main() {
  console.log('Generating visual tests...');
  
  try {
    console.log(`Fetching components from ${config.libraryJsonUrl}...`);
    const data = await fetchJson(config.libraryJsonUrl);
    
    // Check if the data has the expected structure
    if (!data.blocks || !Array.isArray(data.blocks.data)) {
      throw new Error('Invalid response format: missing blocks.data array');
    }
    
    const components = data.blocks.data;
    console.log(`Found ${components.length} components:`, components);
    
    // Generate the test file
    const testFileContent = generateTestFile(components);
    
    // Write the test file
    writeToFile(config.outputFile, testFileContent);
    
    console.log('Visual tests generated successfully!');
  } catch (error) {
    console.error('Error generating tests:', error);
    console.log('Using fallback components...');
    
    // Generate the test file with fallback components
    const testFileContent = generateTestFile(config.fallbackComponents);
    
    // Write the test file
    writeToFile(config.outputFile, testFileContent);
    
    console.log('Visual tests generated with fallback components.');
  }
}

// Run the main function
main();
